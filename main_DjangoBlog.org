#+Title 为了适应自己想做的网站 对这个项目进行部分修改
网站用户:
admin:admin
test:qazxcvbn
test2:qazxcvbn
数据库:
djangoblog:hello
* DONE 尝试和实验
CLOSED: [2020-10-25 日 09:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-25 日 09:46]
:END:
** DONE 实验这个网站
CLOSED: [2020-10-23 五 15:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 15:46]
:END:
*** DONE 解决邮箱登录的问题
CLOSED: [2020-10-23 五 15:42]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 15:42]
:END:
*** DONE 实现文章的发布功能
CLOSED: [2020-10-23 五 15:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 15:46]
:END:
*** DONE 实验功能
CLOSED: [2020-10-23 五 15:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 15:46]
:END:
** DONE 如何添加 amdin部分的修改页面
CLOSED: [2020-10-24 六 15:43]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-24 六 15:43]
:END:
1. [X] 自己创建的那个项目可以添加
2. [X] 试一试 blog中的内容 失败
*** DONE 研究研究他的内容是怎么注册的
CLOSED: [2020-10-24 六 15:35]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-24 六 15:35]
:END:
**** USELESS 直接从blog开始定位
CLOSED: [2020-10-24 六 11:07]
:LOGBOOK:
- State "USELESS"    from "TODO"       [2020-10-24 六 11:07] \\
  找不到内容...
:END:
#+BEGIN_SRC shell
./docker-support/README.md:| DJANGO_SECRET_KEY         | DJANGO_BLOG_CHANGE_ME                                                      | 请务必修改，建议[随机生成](https://www.random.org/passwords/?num=5&len=24&format=html&rnd=new) |
./docker-support/README.md:| DJANGO_WEROBOT_TOKEN      | DJANGO_BLOG_CHANGE_ME                                                      | 请使用自己的微信公众号通信令牌（Token）                                                        |
./docker-support/Dockerfile:ENV DJANGO_SECRET_KEY DJANGO_BLOG_CHANGE_ME
./docker-support/Dockerfile:ENV DJANGO_WXADMIN_PASSWORD DJANGO_BLOG_CHANGE_ME
./docker-support/Dockerfile:ENV DJANGO_WEROBOT_TOKEN DJANGO_BLOG_CHANGE_ME
./docs/config-en.md:You can add website configuration in **Backend->BLOG->WebSiteConfiguration**. Such as: keywords, description, Google Ad, website stats code, case number, etc.
./docs/config.md:在 *后台->BLOG->网站配置* 中,可以新增网站配置，比如关键字，描述等，以及谷歌广告，网站统计代码及备案号等等。

#+END_SRC

#+BEGIN_SRC python
./docker-support/README.md:| DJANGO_SECRET_KEY         | DJANGO_BLOG_CHANGE_ME                                                      | 请务必修改，建议[随机生成](https://www.random.org/passwords/?num=5&len=24&format=html&rnd=new) |
./docker-support/README.md:| DJANGO_WEROBOT_TOKEN      | DJANGO_BLOG_CHANGE_ME                                                      | 请使用自己的微信公众号通信令牌（Token）                                                        |
./docker-support/Dockerfile:ENV DJANGO_SECRET_KEY DJANGO_BLOG_CHANGE_ME
./docker-support/Dockerfile:ENV DJANGO_WXADMIN_PASSWORD DJANGO_BLOG_CHANGE_ME
./docker-support/Dockerfile:ENV DJANGO_WEROBOT_TOKEN DJANGO_BLOG_CHANGE_ME
./docs/config-en.md:You can add website configuration in **Backend->BLOG->WebSiteConfiguration**. Such as: keywords, description, Google Ad, website stats code, case number, etc.
./docs/config.md:在 *后台->BLOG->网站配置* 中,可以新增网站配置，比如关键字，描述等，以及谷歌广告，网站统计代码及备案号等等。


#+END_SRC
**** CANCELLED 从侧边栏 开始定位
CLOSED: [2020-10-24 六 11:10]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2020-10-24 六 11:10] \\
  这个名字 太容易重复了  换一个内容
:END:
#+BEGIN_SRC shell
./collectedstatic/blog/js/blog.js:/** 侧边栏回到顶部 */
grep: ./.#main_DjangoBlog.org: 没有那个文件或目录
./blog/static/blog/js/blog.js:/** 侧边栏回到顶部 */
./blog/templatetags/blog_tags.py:    加载侧边栏
匹配到二进制文件 ./blog/templatetags/__pycache__/blog_tags.cpython-39.pyc
./blog/models.py:    """侧边栏,可以展示一些html内容"""
./blog/models.py:        verbose_name = '侧边栏'
./blog/models.py:    sidebar_article_count = models.IntegerField("侧边栏文章数目", default=10)
./blog/models.py:    sidebar_comment_count = models.IntegerField("侧边栏评论数目", default=5)
./blog/migrations/0001_initial.py:                ('sidebar_article_count', models.IntegerField(default=10, verbose_name='侧边栏文章数目')),
./blog/migrations/0001_initial.py:                ('sidebar_comment_count', models.IntegerField(default=5, verbose_name='侧边栏评论数目')),
./blog/migrations/0001_initial.py:                'verbose_name': '侧边栏',
./blog/migrations/0001_initial.py:                'verbose_name_plural': '侧边栏',
匹配到二进制文件 ./blog/migrations/__pycache__/0001_initial.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/models.cpython-39.pyc
./README.md:- 侧边栏功能，最新文章，最多阅读，标签云等。


#+END_SRC
***** 一点点分析
#+BEGIN_SRC python
admin_site.register(commands, CommandsAdmin)
语句是在admin_site.py里面
commands 是 在  models 里面写的
commadnsAdmin 是在 admin 里面写的

#+END_SRC




**** USELESS 从 分类 追踪吧
CLOSED: [2020-10-24 六 12:03]
:LOGBOOK:
- State "USELESS"    from "TODO"       [2020-10-24 六 12:03] \\
  毫无效果
:END:

***** USELESS 一个测试:尝试自己写一下子
CLOSED: [2020-10-24 六 15:18]
:LOGBOOK:
- State "USELESS"    from "TODO"       [2020-10-24 六 15:18] \\
  没用 搞不明白 为啥
:END:
1. 用他的blog吧
2. [ ] 找代码
   1. [ ] admin
      #+BEGIN_SRC python
class BlogArticleAdmin(admin.ModelAdmin):
    list_display=("title","author","publish")
    list_filter=("publish","author")
    search_fields=('title',"body")
    raw_id_fields=("author",)  #这里  ,号 不要省略掉了 这里显示除了数据类型
    date_hierarchy="publish"
    ordering=['publish','author']
admin.site.register(article,BlogArticleAdmin)# 先是创建了article的模型 数据 然后在这里引入 但是想要在别的地方使用呢?以后就会明白了
      #+END_SRC
   2. [ ] model
      #+BEGIN_SRC python
class article(models.Model):
    #title
    title=models.CharField(max_length=300)
    #content
    author=models.ForeignKey(User,on_delete=models.CASCADE,verbose_name="blog_posts")
    #user
    body=models.TextField()
    #
    publish=models.DateTimeField(default=timezone.now)
    #
    class Meta:
        ordering=("-publish",)#规定了实例对象的显示顺序 即按照publish的字段进行显示

    def __str__(self):
        return self.title
      #+END_SRC
   3. [ ] 注册
      #+BEGIN_SRC
admin.site.register(article,BlogArticleAdmin)
      #+END_SRC
3. [ ] 写入
4. [ ] 测试

**** USEFULL 参考class Article(BaseModel): 进行修改
CLOSED: [2020-10-24 六 15:34]
:LOGBOOK:
- State "USEFULL"    from "TODO"       [2020-10-24 六 15:34] \\
  直接在blog  按照他的规则添加 之后 修改成功了  接下来按照自己的思路进行修改
:END:
#+BEGIN_SRC python
./blog/admin.py:from .models import Article, Category, Tag, Links, SideBar, BlogSettings
./blog/admin.py:class ArticleListFilter(admin.SimpleListFilter):
./blog/admin.py:        authors = list(set(map(lambda x: x.author, Article.objects.all())))
./blog/admin.py:class ArticleForm(forms.ModelForm):
./blog/admin.py:        model = Article
./blog/admin.py:class ArticlelAdmin(admin.ModelAdmin):
./blog/admin.py:    form = ArticleForm
./blog/admin.py:    list_filter = (ArticleListFilter, 'status', 'type', 'category', 'tags')
./blog/admin.py:        form = super(ArticlelAdmin, self).get_form(request, obj, **kwargs)
./blog/admin.py:        super(ArticlelAdmin, self).save_model(request, obj, form, change)
./blog/templatetags/blog_tags.py:from blog.models import Article, Category, Tag, Links, SideBar, LinkShowType
./blog/templatetags/blog_tags.py:    recent_articles = Article.objects.filter(
./blog/templatetags/blog_tags.py:    most_read_articles = Article.objects.filter(status='p').order_by(
./blog/templatetags/blog_tags.py:    dates = Article.objects.datetimes('created_time', 'month', order='DESC')
匹配到二进制文件 ./blog/templatetags/__pycache__/blog_tags.cpython-39.pyc
./blog/urls.py:        views.ArticleDetailView.as_view(),
./blog/views.py:from blog.models import Article, Category, Tag, Links, LinkShowType
./blog/views.py:class ArticleListView(ListView):
./blog/views.py:        return super(ArticleListView, self).get_context_data(**kwargs)
./blog/views.py:class IndexView(ArticleListView):
./blog/views.py:        article_list = Article.objects.filter(type='a', status='p')
./blog/views.py:class ArticleDetailView(DetailView):
./blog/views.py:    model = Article
./blog/views.py:        obj = super(ArticleDetailView, self).get_object()
./blog/views.py:        return super(ArticleDetailView, self).get_context_data(**kwargs)
./blog/views.py:class CategoryDetailView(ArticleListView):
./blog/views.py:        article_list = Article.objects.filter(
./blog/views.py:class AuthorDetailView(ArticleListView):
./blog/views.py:        article_list = Article.objects.filter(
./blog/views.py:class TagDetailView(ArticleListView):
./blog/views.py:        article_list = Article.objects.filter(
./blog/views.py:class ArchivesView(ArticleListView):
./blog/views.py:        return Article.objects.filter(status='p').all()
./blog/models.py:            Article) and 'update_fields' in kwargs and kwargs['update_fields'] == ['views']
./blog/models.py:            Article.objects.filter(pk=self.pk).update(views=self.views)
./blog/models.py:class Article(BaseModel):
./blog/models.py:        return Article.objects.filter(
./blog/models.py:        return Article.objects.filter(id__lt=self.id, status='p').first()
./blog/models.py:        return Article.objects.filter(tags__name=self.name).distinct().count()
./blog/documents.py:from blog.models import Article, Category, Tag
./blog/documents.py:class ArticleDocument(Document):
./blog/documents.py:        doc_type = 'Article'
./blog/documents.py:class ArticleDocumentManager():
./blog/documents.py:        ArticleDocument.init()
./blog/documents.py:            ArticleDocument(
./blog/documents.py:        ArticleDocument.init()
./blog/documents.py:        articles = articles if articles else Article.objects.all()
./blog/migrations/0001_initial.py:            name='Article',
匹配到二进制文件 ./blog/migrations/__pycache__/0001_initial.cpython-39.pyc
./blog/tests.py:from blog.models import Article, Category, Tag, SideBar, Links
./blog/tests.py:class ArticleTest(TestCase):
./blog/tests.py:        article = Article()
./blog/tests.py:            article = Article()
./blog/tests.py:        p = Paginator(Article.objects.all(), 2)
./blog/tests.py:        p = Paginator(Article.objects.filter(tags=tag), 2)
./blog/tests.py:            Article.objects.filter(
./blog/tests.py:        p = Paginator(Article.objects.filter(category=category), 2)
匹配到二进制文件 ./blog/__pycache__/urls.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/search_indexes.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/documents.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/models.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/context_processors.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/views.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/admin.cpython-39.pyc
./blog/search_indexes.py:from blog.models import Article, Category, Tag
./blog/search_indexes.py:class ArticleIndex(indexes.SearchIndex, indexes.Indexable):
./blog/search_indexes.py:        return Article
./blog/management/commands/create_testdata.py:from blog.models import Article, Tag, Category
./blog/management/commands/create_testdata.py:            article = Article.objects.get_or_create(
./blog/management/commands/ping_baidu.py:from blog.models import Article, Tag, Category
./blog/management/commands/ping_baidu.py:            for article in Article.objects.filter(status='p'):
./blog/management/commands/build_index.py:from blog.documents import ElapsedTimeDocument, ArticleDocumentManager
./blog/management/commands/build_index.py:from blog.models import Article
./blog/management/commands/build_index.py:        manager = ArticleDocumentManager()
./blog/management/commands/build_search_words.py:from blog.models import Article, Tag, Category
./blog/context_processors.py:from .models import Category, Article, Tag, BlogSettings
./blog/context_processors.py:            'nav_pages': Article.objects.filter(
./mytest/admin.py:from .models import BlogArticles
./mytest/admin.py:admin.site.register(BlogArticles)
./mytest/models.py:class BlogArticles(models.Model):
./mytest/migrations/0001_initial.py:            name='BlogArticles',
匹配到二进制文件 ./mytest/migrations/__pycache__/0001_initial.cpython-39.pyc
匹配到二进制文件 ./mytest/__pycache__/models.cpython-39.pyc
./accounts/tests.py:from blog.models import Article, Category, Tag
./accounts/tests.py:        article = Article()
./accounts/tests.py:        article = Article()
./DjangoBlog/utils.py:    from blog.models import Article
./DjangoBlog/utils.py:    return (Article.objects.latest().pk, Comment.objects.latest().pk)
./DjangoBlog/urls.py:from DjangoBlog.sitemap import StaticViewSitemap, ArticleSiteMap, CategorySiteMap, TagSiteMap, UserSiteMap
./DjangoBlog/urls.py:    'blog': ArticleSiteMap,
./DjangoBlog/elasticsearch_backend.py:from blog.models import Article
./DjangoBlog/elasticsearch_backend.py:from blog.documents import ArticleDocument, ArticleDocumentManager
./DjangoBlog/elasticsearch_backend.py:        self.manager = ArticleDocumentManager()
./DjangoBlog/elasticsearch_backend.py:        models = iterable if iterable else Article.objects.all()
./DjangoBlog/elasticsearch_backend.py:        models = models if models else Article.objects.all()
./DjangoBlog/elasticsearch_backend.py:        search = ArticleDocument.search() \
./DjangoBlog/elasticsearch_backend.py:            model_name = 'Article'
./DjangoBlog/admin_site.py:from mytest.models import BlogArticles,Test
./DjangoBlog/admin_site.py:admin_site.register(Article, ArticlelAdmin)
./DjangoBlog/tests.py:from blog.models import Article, Category, Tag
匹配到二进制文件 ./DjangoBlog/__pycache__/urls.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/feeds.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/sitemap.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/utils.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/admin_site.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/blog_signals.cpython-39.pyc
./DjangoBlog/feeds.py:from blog.models import Article
./DjangoBlog/feeds.py:        return Article.objects.filter(type='a', status='p').order_by('-pub_time')[:5]
./DjangoBlog/blog_signals.py:from blog.models import Article, Category, Tag, Links, SideBar, BlogSettings
./DjangoBlog/sitemap.py:from blog.models import Article, Category, Tag
./DjangoBlog/sitemap.py:class ArticleSiteMap(Sitemap):
./DjangoBlog/sitemap.py:        return Article.objects.filter(status='p')
./DjangoBlog/sitemap.py:        return list(set(map(lambda x: x.author, Article.objects.all())))
./docs/README-en.md:- Articles, Pages, Categories, Tags(Add, Delete, Edit), edc. Articles and pages support `Markdown` and highlighting.
./docs/README-en.md:- Articles support full-text search.
./.git/COMMIT_EDITMSG:参考class Article(BaseModel): 进行修改
./.git/logs/HEAD:7c31178de6f55f86338da3587905c03b7e4864ea 900653ce1fcc801d06e56dfa4134e70ef479120a zhang1998 <2764207312@qq.com> 1603523977 +0800	commit: 参考class Article(BaseModel): 进行修改
./.git/logs/refs/heads/master:7c31178de6f55f86338da3587905c03b7e4864ea 900653ce1fcc801d06e56dfa4134e70ef479120a zhang1998 <2764207312@qq.com> 1603523977 +0800	commit: 参考class Article(BaseModel): 进行修改


#+END_SRC

**** TODO 直接修改
**** TODO 百度 修改 设定文件的方法
**** TODO 学一学基本的知识然后进行修改
**** TODO 将其修改为原本的版本
**** TODO 从站点管理 反面追踪
*** DONE 自己创建的app 能添加吗?
CLOSED: [2020-10-24 六 15:42]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-24 六 15:42]
:END:
1. [X] 创建app
2. [X] 创建model
3. [X] 数据
4. [X] 注册
5. [X] 测试
** DONE 自己修改 注册的 内容 进行修改
CLOSED: [2020-10-24 六 16:15]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-24 六 16:15]
:END:
*** DONE 把image  与 文字内容对应的部分创建好
CLOSED: [2020-10-24 六 15:47]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-24 六 15:47]
:END:
能够使用admin  进行管理
1. [X] models
2. [X] make
3. [X] 注册
4. [X] 测试

虽然效果 和我想的不一样 但是大概是成了  当然 以后其实能修改成别的
*** TODO 新的效果 将其 创建在一个页面里面
** DONE 图片和文字的复杂结合
CLOSED: [2020-10-24 六 16:21]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-24 六 16:21]
:END:
*** DONE 添加文字的部分
CLOSED: [2020-10-24 六 16:21]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-24 六 16:21]
:END:
**** DONE 先看懂部分代码
CLOSED: [2020-10-23 五 16:08]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 16:08]
:END:
主要是找到 他的内容才能进行自己的修改

./blog/models.py:        '文章状态',
./blog/migrations/0001_initial.py:                ('status', models.CharField(choices=[('d', '草稿')

这货  就是直接写的model  然后调用的  我感觉
**** DONE 直接使用admin添加内容
CLOSED: [2020-10-24 六 16:16]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-24 六 16:16]
:END:
1. [X] 定义model
2. [X] 进行注册
3. [X] 测试 失败 不知道为啥
***** TODO 先按照老齐的那个方案注册一下
* DONE 准备一个例子进行测试
CLOSED: [2020-10-26 一 20:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-26 一 20:37]
:END:
能够简单的实现各种功能了
** DONE 先显示一张图片
CLOSED: [2020-10-25 日 09:49]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-25 日 09:49]
:END:
1. 在newGroup下
2. [X] iamge
3. [X] html
4. [X] url
5. [X] 测试  能链接到界面吗
6. [X] 写入image的链接
   1. 能用的链接:              <img src="{% static 'assets/img/mem.jpeg' %}" class="img-circle" id="my_photo" name="user_face">

#+BEGIN_SRC html
http://localhost:8000/newGroup/%7B%%20static%20'images/assets/img/mem.jpeg%7D

http://localhost:8000/newGroup/%7B%%20static%20'images/assets/img/mem.jpeg%7D


http://localhost:8000/static/images/assets/img/mem.jpeg

http://localhost:8000/static/images/assets/img/mem.jpeg

#+END_SRC
*** TODO 从搜索img开始
1. [ ] 从cloleccted部分
   1. [ ] 复制img
   2. [ ] img位置

** DONE 创建一组资源
CLOSED: [2020-10-25 日 09:56]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-25 日 09:56]
:END:
1. 6
2. [X] image
3. [X] content
** DONE 实现界面的显示部分
CLOSED: [2020-10-26 一 20:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-26 一 20:37]
:END:
比较接近实际功能的部分
*** DONE 实现框架部分的功能
CLOSED: [2020-10-25 日 10:04]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-25 日 10:04]
:END:
1. 集成这个基本的显示框架
2. 然后就是基本的显示排列了
3. 直接修改test.html

*** DONE 实现图片的连续显示
CLOSED: [2020-10-25 日 10:04]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-25 日 10:04]
:END:

*** DONE 图片+文字的连续显示 html版本
CLOSED: [2020-10-25 日 10:43]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-25 日 10:43]
:END:
1. [X] 文字在图片上方 两侧显示
   1. [X] 显示
   2. [X] 两侧 的位置控制
2. [X] 提交commit

*** DONE 使用函数版本
CLOSED: [2020-10-26 一 20:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-26 一 20:37]
:END:
1. [-] 能调用储存的内容
   1. 肯定是用view  将图片传过来
   2. [X] 测试
      1. [X] 调用的方法 shell
         #+BEGIN_SRC python
n [9]: id1=Group.objects.get(imageId=1)

In [13]: id1.textContent
Out[13]: '这里是第1张图片  文字内容虽然都是省略的 但也是很有意思'

qu是如何访问 的
.all

通过 操作 qu实现多种功能

 #+END_SRC
   3. [-] 实践
      1. [X] 显示
         1. 能够调用显示页面了
         2. [X] html

         3. [X] view

         4. [X] url


**** DONE 循环显示内容部分测试
CLOSED: [2020-10-26 一 20:36]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-26 一 20:36]
:END:
面对多组需要显示的内容

筛选对应的组 然后显示相应的文本内容

      1. [-] 功能部分
         1. 测试代码
                        #+BEGIN_SRC python
   text=Group.objects.all()
   t1=text.get(imageId=1)
               t1.imageId

n [9]: id1=Group.objects.get(imageId=1)

In [13]: id1.textContent
Out[13]: '这里是第1张图片  文字内容虽然都是省略的 但也是很有意思'

qu是如何访问 的
.all

通过 操作 qu实现多种功能

               #+END_SRC
         2. [X] 对一张 图片能显示对应的内容
            #+BEGIN_SRC python
            #筛选组的id
            qu1=Groups.objects.filter(title='testshow')
            qu1=qu1.get()
            id1=qu1.id
            #获得 组对应的内容
            qu2=Group.objects.filter(groups=id1)

            #对组对应的内容进行排序
            qu2=qu2.order_by('showOrder')
            #传递组的内容

             #+END_SRC
         3. [-] 循环显示图片 循环显示内容
            1. [X] useless在html  上使用 js进行修改
               1. [X] useless测试javascript 修改 img 内容
                  #+BEGIN_SRC python
正确:
http://localhost:8000/static/assets/img/1.jpg

http://localhost:8000/static/assets/img/6.jpg
http://localhost:8000/static/assets/img/spinner.jpg

http://localhost:8000/static/assets/img/spinner.jpg


                                <script>
                  document.getElementById("image").src="http://localhost:8000/static/assets/img/"+{{column.imageId}}+".jpg"
                </script>

#有一个问题 就是 script  部分并没有进行循环
                  #+END_SRC
            2. [-] 方案一  在 view上

               1. [X] 测试 两个html的显示
                  #+BEGIN_SRC html
http://localhost:8000/newGroup/%7B%%20static%20'assets/img/1.jpg'%20%%7D

http://localhost:8000/static/assets/img/%7B%7BimageId%7D%7D.jpg
http://localhost:8000/newGroup/%7B%7BimageId%7D
http://localhost:8000/newGroup/%7B%%20static%20'assets/img/1.jpg'%20%%7D
http://localhost:8000/newGroup/%7B%

正确的
http://localhost:8000/static/assets/img/1.jpg

错误:
http://localhost:8000/newGroup/static/assets/img/1.jpg
                  #+END_SRC

               2. [ ] 修改 view的部分

                  1. [ ] 多层的词典 直接填入 可以使用view修改的那种


            2. [ ] 方案二  在html上
               1. 原来的图片
                  #+BEGIN_SRC html
                   <img src="{% static 'assets/img/1.jpg' %}" class="img-circle" id="my_photo" name="user_face">
   http://localhost:8000/newGroup/static/assets/img/1.jpg

                  #+END_SRC
               2. [ ] 直接 显示id  多好

               3. [ ] shell测试

               4. [ ] 重新定义字典然后显示

                  1. filter一下

                  2. 获得 一组

                  3. 循环get
      2. [ ] 对应的图片对应的内容
         1. [ ]



***** USELESS 测试4  看看那个column的例子
CLOSED: [2020-10-25 日 11:39]
:LOGBOOK:
- State "USELESS"    from "TODO"       [2020-10-25 日 11:39] \\
  没有成型的代码
:END:
可能有成型 的代码 就不用自己去找了
***** TODO 测试5
直接用groups 进行筛选
然后获得column 进行传递


将内容存成 字典 然后 传递过去
1. 按照 show的顺序 显示 匹配的内容
2. [X] 如何使用字典
   #+BEGIN_SRC python
columns = ArticleColumn.objecs.filter(groups=request.testshow)
return render(


{% for column in columns %} #

{{column.column}}#应该用来显示content

Group.objects.filter(imageId=1)

id1=Group.objects.filter(imageId=1).get()

   #+END_SRC
3. 直接调用了
4. [X] 从shell上练习 功能
5. [X] copy功能的实现部分
   1. [X] view 的部分

   2. [X] 继续shell 练习

   3. [X] 继续shell 练习
      #+BEGIN_SRC python

 id1=Group.objects.filter(groups=1).get()


for e in Group.objects.order_by('showOrder'):
    ...:     print(e.textContent)


    id1.order_by('showOrder')
想要使用多个函数 就嵌套就完事了 毕竟document 上写的都是返回的 qu

             #+END_SRC

      1. [X] 直接了解其 使用方法

         1. [X] 能不能用名字过滤?

         2. [X] 排序

         3. [X] 过滤的问题

         4. [X] 使用

      2. [X] 嵌套添加内容

         1. [X] view

         2. [X] html

      3. [X] 字典详解 循环调用 传递 全部内容的方法

      4. [X] 调用

   4. [X] html的部分
6. [X] 测试
7. [ ] 修改图片的显示部分
   #+BEGIN_SRC python
   http://localhost:8000/static/assets/img/%7B%7Bcolumn.id%7D%7D.jpg

    #+END_SRC
****** TODO id的部分处理
****** TODO 排序问题
***** TODO 测试2
将内容存成 字典 然后 传递过去
1. 按照 show的顺序 显示 匹配的内容
2. [ ] 如何使用字典
   #+BEGIN_SRC python
columns = ArticleColumn.objecs.filter(user=request.user)
return render(


{% for column in columns %} #

{{column.column}}#应该用来显示content



   #+END_SRC
3. 直接调用了
4. [ ] 从shell上练习 功能
5. [ ] copy功能的实现部分

***** TODO 测试3
直接显示 只不过每次过滤的内容不一样

不断循环内容
然后过滤
1. imageid 传递id
2. 文字内容
***** TODO 测试1
直接  将 循环的代码部分 扔到 html里面
* TODO 更多功能的实现
** DONE 手机上的记录...
CLOSED: [2020-10-26 一 18:40]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-26 一 18:40]
:END:
** DONE 传递成功之后 使用新的 方法 重排顺序
CLOSED: [2020-10-27 二 20:27]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-27 二 20:27]
:END:
图片的排序问题 一个关键的问题 是 还要处理排序的问题
如果显示顺序和id的顺序不一样 毕竟是以显示 顺序 为核心的 因此 就要让其按照显示顺序进行处理
** DONE 基础界面
CLOSED: [2020-10-27 二 20:49]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-27 二 20:49]
:END:

*** DONE 资源的准备
CLOSED: [2020-10-26 一 21:22]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-26 一 21:22]
:END:

**** DONE 页面元素的复制 html
CLOSED: [2020-10-26 一 21:22]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-26 一 21:22]
:END:
1. [X] 导航栏
2. [X] 主页
3. [X] 每个作品的导航页面
**** DONE 添加自己想要的部分按键 等等 取出 相应的部分
CLOSED: [2020-10-26 一 21:22]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-26 一 21:22]
:END:
1. 在一个能实时渲染的时候 进行修改
2. [ ] 导航栏
3. [ ] 主页
4. [ ] 每个作品的导航页面

*** DONE 导航栏
CLOSED: [2020-10-27 二 20:47]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-27 二 20:47]
:END:
1. [X] 然后创建comic app  进行测试 和安排
2. [X] 先把 图标改一改
3. [X] 新建一个文件夹放置这些html
4. [X] 参考他的实现 主要是 添加修改html内容
   1. [X] footer
   2. [X] nav
   3. [X] base
5. 主页 和打开漫画 的时候 其实显示的工具栏是不一样的 当然这是对手机说 但是对电脑是一样的
#+BEGIN_SRC html

                <a href="/">漫画分类</a>
                <a href="/">动漫</a>
                <a href="/">游戏</a>
                <a href="/">文字</a>
                <a href="/">用户</a>
                <a href="/">搜索</a>
                <a href="/">上传漫画</a>

#+END_SRC

**** 最下边





同行的链接  或者是友好的链接




**** 导航栏目下  是功能区
首页
漫画分类
动漫
游戏
文字

随机筛子
搜索
用户

几个比较关键的功能
:上传
:搜索
:登录
** TODO 优化修改部分 添加一个比较合理的页面
在 newGroup  app下
*** DONE 准备内容
CLOSED: [2020-10-27 二 20:52]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-27 二 20:52]
:END:
1. [X] url的跳转



*** DONE 上传图片
CLOSED: [2020-10-28 三 14:30]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-28 三 14:30]
:END:

**** DONE 上传的图片img
CLOSED: [2020-10-27 二 21:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-27 二 21:37]
:END:
文件夹复制 图片组
1. [X] 准备六个

**** DONE 将相关信息存储到 数据库
CLOSED: [2020-10-28 三 14:30]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-28 三 14:30]
:END:
创建model  admin存入
1. [X] model
2. [X] 注册
3. [X] 修改




*** TODO 获得想要使用的图片组:使用搜索 获取图片组

**** DONE 如何实现搜索功能
CLOSED: [2020-10-29 四 10:27]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-29 四 10:27]
:END:
1. [X] 去 django上搜一搜
2. [X] 方案
   1. [X] 官方插件 还用自己写什么东西吗  估计是不用  更加省事
      1. 先用  pip install django-search 这个吧
      2. [X] 改其 代码 用filter进行过滤 毕竟只是搜索名字 还是这个省事
         #+BEGIN_SRC python
        {% load search_tags %}
        {% search queryset field1 field2 ... %}

         #+END_SRC
      3. [X] 看看其定义
      4. [X] [[学习单元测试]]:python
      5. [X] 修改部分内容 看看效果 :能够 搜索文章 但是搜索不到图片....不知道为啥 看来只能自己写了
   2. [X] 自己写filter
      1. [X] 能不能过滤不全的内容啊
         #+BEGIN_SRC python
In [9]: ImageSt.objects.filter(title__contains='测试')
Out[9]: <QuerySet [<ImageSt: ImageSt object (1)>]>


         #+END_SRC

      2. [X] form 提交搜索内容

      3. [X] 函数内容 view 提交表单

      4. [X] views的内容

      5. [X] 修改返回结果的部分的设计 选择设计一 更好看方便

         1. 设计二:不断跳转到新的页面 但是灵活性就差一些

         2. 设计一:返回的是一个页面 包含了 一组符合要求的图(包含title关键字的图 同时展示基本的信息  点击跳转进去 就是创建新组的页面) 展示了基本的信息  然后 是拖动图的内容 到 修改部分 即能够 进行 创建新新组的信息

      6. [X] 实现搜索结果的返回

         1. [X] 返回组图的信息




***** TODO 后续可选的方案
   3. [ ] 官方插件 还用自己写什么东西吗  估计是不用  更加省事
   4. [ ] 官方插件 还用自己写什么东西吗  估计是不用  更加省事
   5. [ ] 官方插件 还用自己写什么东西吗  估计是不用  更加省事
   6. [ ] 官方插件 还用自己写什么东西吗  估计是不用  更加省事
   7. [ ] 百度

**** TODO 搜索功能和创建功能的信息传递与结合

***** TODO 写html

****** DONE 两块
CLOSED: [2020-10-29 四 11:02]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-29 四 11:02]
:END:
1. [X] 寻找两块的方法
   #+BEGIN_SRC html
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>菜鸟教程(runoob.com)</title>
</head>
<body>

<div id="container" style="width:500px">

<div id="header" style="background-color:#FFA500;">
<h1 style="margin-bottom:0;">主要的网页标题</h1></div>

<div id="menu" style="background-color:#FFD700;height:200px;width:70%;float:left;">
<b>负责修改的那部分内容</b><br>

        t</div>

<div id="content" style="background-color:#EEEEEE;height:200px;width:30%;float:left;">
负责搜索的那部分内容</div>

<div id="footer" style="background-color:#FFA500;clear:both;text-align:center;">
版权 © runoob.com</div>

</div>

</body>
</html>

   #+END_SRC
2. [X] 菜鸟上进行测试
3. [X] 进行html创建
****** DONE 进行创建的部分 html
CLOSED: [2020-10-29 四 14:25]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-29 四 14:25]
:END:
1. [X] html部分
   1. [X] 使用model
      1. [X] title  自己创建的组的名字
      2. [X] 使用的原图 groups编号
      3. [X] 创建时间
   2. [X] forms
   3. [X] 在html中使用
   4. [X] view 中创建可以访问的视图
   5. [X] 测试效果
****** TODO 添加条目的内容 html  如何处理
1. [ ] 新建
2. [ ] 删除
3. [ ] 点击修改

******* DONE 先看看其他资料
CLOSED: [2020-10-30 五 15:53]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-30 五 15:53]
:END:
1. 先试一试
2. [-] 用新的文件进行表格的测试
   1. [X] 新的html文件
   2. [X] 对统一的script文件的测试
      1. 用菜鸟教程 上的 内容进行测试
      2. [X] 写一个内容与功能
      3. [X] 如何引入文件
         1. [N] 当前文件夹 + ./
         2. [N] 当前文件夹  直接引入
         3. [X] 找到放js的地方
            #+BEGIN_SRC html
src="/static/CACHE/js/output.83ba32b80846.js">

可行:  在header里面加入:
    <script src="/static/newGroup/js/test.js" type="text/javascript"></script>

static 也能用 还是在 static文件夹下的路径
    <script src="{% static '/newGroup/js/test.js' %}" type="text/javascript"></script>

            #+END_SRC
   3. [X] [[js%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0][学一学js吧]]  不然都不知道如何调试 烦死了
******* TODO 继续研究表格:插件
:LOGBOOK:
CLOCK: [2020-10-31 六 15:40]--[2020-10-31 六 15:51] =>  0:11
CLOCK: [2020-10-31 六 09:54]--[2020-10-31 六 10:00] =>  0:06
:END:
http://vitalets.github.io/x-editable/docs.html

   1. 指标
      1. 丰富的编辑功能
         1. 一般要求
            1. 点击编辑
            2. 删除
            3. 修改
            4. 添加
         2. 进阶要求
            1. 对顺序的优化
               1. 一种可能是 拖动
               2. 一种可能是 重新定义排序
               3. 一种可能是 能够操作都是针对每行的
      2.
   2. [ ] 插件
   3. [ ] 试一试别人写的代码
      1. [ ] js

      2. [ ] html
******** TODO X-editable
:LOGBOOK:
CLOCK: [2020-10-31 六 15:51]
:END:
1. [X] 按照教程来
   1. [X] 添加html 表格
   2. [X] 按照教程进行修改 添加
   3. [X] 测试第一个可以修改的内容
2. [ ] 测试功能 调试功能
3. [ ] 修改参数
   1. [ ] url
   2. [ ] scr的链接
******* TODO 继续研究表格:别人的代码
看上去 有图形了 但是 功能不能使用 不知道为啥 哈哈
******** TODO 按键部分的功能:删除
:LOGBOOK:
CLOCK: [2020-10-31 六 09:43]--[2020-10-31 六 09:54] =>  0:11
:END:
1. [X] 实验删除语句的效果 :tabProduct
   1. [X] 删除i=1 是有效的  删除了 有效内容的第一行
      #+BEGIN_SRC javascript
  tabProduct.deleteRow(1);

      #+END_SRC
2. [C] 实验删除语句的效果 :传递参数 没问题
   1. [ ] 删除i=1
   2. [ ] 删除i=2
   3. [ ] 删除i=3
3. [-] 修改功能代码部分
   1. [-] 逆向思考
      1. [-] 在菜鸟上自己测试程序 完成内容

         1. [-] 点击按键 检测checkbox
            1. [-] 先试试获得checkbox的方法

               1. [X] 抄袭  表格的代码

               2. [X] 抄袭 内容的代码

               3. [ ] 测试
         2. [ ] 点击按键 删除特定行
            #+BEGIN_SRC javascript
      //可以参考的代码
      <input type="checkbox" id="test" class="test">同意
      <script>
          // 获取checkbox元素
          var box=document.getElementById("test");
          // 判断是否被拒选中，选中返回true，未选中返回false
          alert(box.checked);
      </script>


      //他用的代码
      <td align="center" bgcolor="#FFFFFF"><input type="checkbox" name="checkbox2" value="checkbox" /></td>


            #+END_SRC
   2. [ ] 顺向思考

      1. [ ] 如何判断 checkbox被选中了

      2. [ ] table里的checkbox
4. [ ] 测试
******** USEFULL 按键部分的功能:新增
CLOSED: [2020-10-30 五 17:05]
:LOGBOOK:
- State "USEFULL"    from "TODO"       [2020-10-30 五 17:05] \\
  能够使用
:END:
1. [X] 能调用功能吗?
2. [ ] 先把调用整明白
   1. [ ] test.js
   2. 文件位置 不对 但是我又找不到问题 就很离谱
   3. [ ] 当前文件夹下的js
3. [ ] 功能函数写的有问题吗
#+BEGIN_SRC html
不是这个./newGroup/static/newGroup/js/test.js:function mdisplayDate(){
./templates/newGroup/tableTest2.html:<input type="button" name="Submit2" value="测试" onclick="displayDate()" />
./templates/mytest/testjs.html:function displayDate(){
./templates/mytest/testjs.html:<button type="button" onclick="displayDate()">显示日期</button>


#+END_SRC
******** USEFULL 按键部分的功能:重置
CLOSED: [2020-10-30 五 17:05]
:LOGBOOK:
- State "USEFULL"    from "TODO"       [2020-10-30 五 17:05] \\
  能够使用 直接 重置为 最初始的状态
:END:
******** TODO 点击就能修改的功能

******** TODO 按键部分的功能:提交
******* TODO 老齐的解决方案
但是不使用弹窗修改 而是使用js  像表格一样修改
1. [ ] django 有插件吗
2. [ ] 有这种api吗
****** TODO 显示信息的部分

****** TODO 拖动的功能

****** TODO 提交部分的实现
***** TODO 功能部分的实现 逐步调试 和实现

****** TODO 搜索部分

****** TODO 创建部分

****** TODO 拖动功能

*** TODO 创建的功能
**** TODO UI的实现
**** TODO 修改大部分的功能与内容
*** TODO 为新组添加内容


*** TODO 设计过程
1. 在 newGroup文件下进行修改
2. [X] model
3. [ ] 复习他的form是怎么写的
4. [ ] form
5. [ ] view
6. [ ] html

** TODO 去github上找一些功能比较齐全的django网站资源
还是直接修改 更加省事 自己写实在是太慢了
** TODO 图片的存储与管理
1. 图片的存储与显示
   #+BEGIN_SRC python
    <img src="{% static '/images/Flufft-Cat.jpeg' %}">
#用上上面这种形式的

   #+END_SRC
2. 文字内容
3. 图片顺序
4. 文字和图片的对应
5. 版本
   1. 文件夹

   2. 数据库

      1. 设计对应

      2. 实现

      3. 使用六个例子

   3. django插件

** TODO 有没有更好的模板
1. [ ] 搜索功能
2. [ ] 创建页面
3. [ ] 展示功能

** TODO 文章搜索功能
直接在html里面加入
#+BEGIN_SRC html
        {% load search_tags %}

        {% search queryset field1 field2 ... %}

然后就能使用搜索框了

#+END_SRC

** TODO 实现标签的功能
** TODO 实现图片的上传功能
和图片相关的
1. 功能有两个
   1. 上传原始图
   2. 原始图的显示
   3. 新建 显示序列
2. 需要的表 有两个
   1. 存储表  存储作品信息 和保存的位置
   2. 显示表 用来进行加工 和标定 显示顺序

是在上传的时候 会进行 一组默认显示顺序的创建
*** TODO 把model的Name:去掉  数据内容重新规划一下子
*** TODO 找一找有没有插件
*** TODO 实现页数自己统计
*** TODO 实现上架日期和更新日期
** TODO 优化显示部分
每个页面返回的是不同的iamge组 是id与图片组 的处理混合
*** TODO 主页 的设计
*** TODO 每个内容 的 页面的设计
**** TODO 添加 创建新组的功能
*** TODO 导航栏
**** 最上面的导航栏
打赏
广告洽谈

*** TODO 文字显示部分的优化
1. 字体
2. 颜色
3. 多个发言人的设计
** TODO 优化搜索功能
** TODO 适应手机ui的方法
** TODO 哪怕是group 上的model 也要好好思考了 这里面好像还有问题...
** TODO xmind上的其他功能
** TODO 用户的管理
** TODO 优化编辑部分
*** TODO 关于新建的内容和原先内容的排序问题
**** TODO 每行都有删除和创建按钮 这样就方便许多了
**** TODO 4. [ ] 拖动 将某一个格的内容拖动过去
能够拖动单独的单元格实现复制的功能
*** TODO 比如使用的图片能够来自多个组
*** TODO 比如编辑部分的功能
1. 搜索后 在右侧 得到符合要求的一组图
2. 将图拖过来 就获得了 一组信息 这组信息 就是接下来将要编辑的图片的信息
** TODO 图片的上传功能
注意添加
1. 什么 标签啊 作者的 自动补全 防止混乱
** TODO 图片与文字的结合2
*** TODO 测试几种方案的效果
1. 图片是背景 文字是文字  只不过到了某个位置 文字会发生变化
2. 图片 与文字 是完全分割的
   1. 要思考 这里和那些有插图的 小说有什么区别呢?  感觉区别不很大....
3. 图片与文字是部分分割的  在插入的图片上是有文字的

说到底这些 也不过是视觉小说罢了 只不过和一般的视觉小说不是很一样 罢了

甚至这种想法 在 手机app上的  表现形式更好  比如做成的就是视觉小说游戏


*** TODO 把几种方案都做出来
** TODO 上线
** TODO 图片存储的优化
*** TODO 显示的优化
*** TODO ui的修改
*** TODO 大批量图片的存储
* TODO 读完  老齐的备注部分...
* 学习单元测试
** DONE python 单元测试
CLOSED: [2020-10-29 四 09:19]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-29 四 09:19]
:END:
** TODO django 单元测试
* js简单学习
** DONE 如何练习
CLOSED: [2020-10-30 五 15:40]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-30 五 15:40]
:END:
原来直接使用浏览器打开 就能很好的进行调试 和编辑
** TODO 如何直接使用和检测js的内容
* 笔记
在html里面使用js引入的文件  有一定的刷新延迟 不知道为啥
用ctrl+F5 强制 刷新即可
