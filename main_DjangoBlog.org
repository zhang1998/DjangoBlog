#+Title 为了适应自己想做的网站 对这个项目进行部分修改
admin:admin
test:qazxcvbn
test2:qazxcvbn
* TODO 尝试和实验
** DONE 实验这个网站
CLOSED: [2020-10-23 五 15:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 15:46]
:END:
*** DONE 解决邮箱登录的问题
CLOSED: [2020-10-23 五 15:42]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 15:42]
:END:
*** DONE 实现文章的发布功能
CLOSED: [2020-10-23 五 15:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 15:46]
:END:
*** DONE 实验功能
CLOSED: [2020-10-23 五 15:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 15:46]
:END:
** TODO 如何添加 amdin部分的修改页面
1. [X] 自己创建的那个项目可以添加
2. [X] 试一试 blog中的内容 失败
*** TODO 研究研究他的内容是怎么注册的
**** USELESS 直接从blog开始定位
CLOSED: [2020-10-24 六 11:07]
:LOGBOOK:
- State "USELESS"    from "TODO"       [2020-10-24 六 11:07] \\
  找不到内容...
:END:
#+BEGIN_SRC shell
./docker-support/README.md:| DJANGO_SECRET_KEY         | DJANGO_BLOG_CHANGE_ME                                                      | 请务必修改，建议[随机生成](https://www.random.org/passwords/?num=5&len=24&format=html&rnd=new) |
./docker-support/README.md:| DJANGO_WEROBOT_TOKEN      | DJANGO_BLOG_CHANGE_ME                                                      | 请使用自己的微信公众号通信令牌（Token）                                                        |
./docker-support/Dockerfile:ENV DJANGO_SECRET_KEY DJANGO_BLOG_CHANGE_ME
./docker-support/Dockerfile:ENV DJANGO_WXADMIN_PASSWORD DJANGO_BLOG_CHANGE_ME
./docker-support/Dockerfile:ENV DJANGO_WEROBOT_TOKEN DJANGO_BLOG_CHANGE_ME
./docs/config-en.md:You can add website configuration in **Backend->BLOG->WebSiteConfiguration**. Such as: keywords, description, Google Ad, website stats code, case number, etc.
./docs/config.md:在 *后台->BLOG->网站配置* 中,可以新增网站配置，比如关键字，描述等，以及谷歌广告，网站统计代码及备案号等等。

#+END_SRC

#+BEGIN_SRC python
./docker-support/README.md:| DJANGO_SECRET_KEY         | DJANGO_BLOG_CHANGE_ME                                                      | 请务必修改，建议[随机生成](https://www.random.org/passwords/?num=5&len=24&format=html&rnd=new) |
./docker-support/README.md:| DJANGO_WEROBOT_TOKEN      | DJANGO_BLOG_CHANGE_ME                                                      | 请使用自己的微信公众号通信令牌（Token）                                                        |
./docker-support/Dockerfile:ENV DJANGO_SECRET_KEY DJANGO_BLOG_CHANGE_ME
./docker-support/Dockerfile:ENV DJANGO_WXADMIN_PASSWORD DJANGO_BLOG_CHANGE_ME
./docker-support/Dockerfile:ENV DJANGO_WEROBOT_TOKEN DJANGO_BLOG_CHANGE_ME
./docs/config-en.md:You can add website configuration in **Backend->BLOG->WebSiteConfiguration**. Such as: keywords, description, Google Ad, website stats code, case number, etc.
./docs/config.md:在 *后台->BLOG->网站配置* 中,可以新增网站配置，比如关键字，描述等，以及谷歌广告，网站统计代码及备案号等等。


#+END_SRC
**** CANCELLED 从侧边栏 开始定位
CLOSED: [2020-10-24 六 11:10]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2020-10-24 六 11:10] \\
  这个名字 太容易重复了  换一个内容
:END:
#+BEGIN_SRC shell
./collectedstatic/blog/js/blog.js:/** 侧边栏回到顶部 */
grep: ./.#main_DjangoBlog.org: 没有那个文件或目录
./blog/static/blog/js/blog.js:/** 侧边栏回到顶部 */
./blog/templatetags/blog_tags.py:    加载侧边栏
匹配到二进制文件 ./blog/templatetags/__pycache__/blog_tags.cpython-39.pyc
./blog/models.py:    """侧边栏,可以展示一些html内容"""
./blog/models.py:        verbose_name = '侧边栏'
./blog/models.py:    sidebar_article_count = models.IntegerField("侧边栏文章数目", default=10)
./blog/models.py:    sidebar_comment_count = models.IntegerField("侧边栏评论数目", default=5)
./blog/migrations/0001_initial.py:                ('sidebar_article_count', models.IntegerField(default=10, verbose_name='侧边栏文章数目')),
./blog/migrations/0001_initial.py:                ('sidebar_comment_count', models.IntegerField(default=5, verbose_name='侧边栏评论数目')),
./blog/migrations/0001_initial.py:                'verbose_name': '侧边栏',
./blog/migrations/0001_initial.py:                'verbose_name_plural': '侧边栏',
匹配到二进制文件 ./blog/migrations/__pycache__/0001_initial.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/models.cpython-39.pyc
./README.md:- 侧边栏功能，最新文章，最多阅读，标签云等。


#+END_SRC
***** 一点点分析
#+BEGIN_SRC python
admin_site.register(commands, CommandsAdmin)
语句是在admin_site.py里面
commands 是 在  models 里面写的
commadnsAdmin 是在 admin 里面写的

#+END_SRC




**** USELESS 从 分类 追踪吧
CLOSED: [2020-10-24 六 12:03]
:LOGBOOK:
- State "USELESS"    from "TODO"       [2020-10-24 六 12:03] \\
  毫无效果
:END:

***** USELESS 一个测试:尝试自己写一下子
CLOSED: [2020-10-24 六 15:18]
:LOGBOOK:
- State "USELESS"    from "TODO"       [2020-10-24 六 15:18] \\
  没用 搞不明白 为啥
:END:
1. 用他的blog吧
2. [ ] 找代码
   1. [ ] admin
      #+BEGIN_SRC python
class BlogArticleAdmin(admin.ModelAdmin):
    list_display=("title","author","publish")
    list_filter=("publish","author")
    search_fields=('title',"body")
    raw_id_fields=("author",)  #这里  ,号 不要省略掉了 这里显示除了数据类型
    date_hierarchy="publish"
    ordering=['publish','author']
admin.site.register(article,BlogArticleAdmin)# 先是创建了article的模型 数据 然后在这里引入 但是想要在别的地方使用呢?以后就会明白了
      #+END_SRC
   2. [ ] model
      #+BEGIN_SRC python
class article(models.Model):
    #title
    title=models.CharField(max_length=300)
    #content
    author=models.ForeignKey(User,on_delete=models.CASCADE,verbose_name="blog_posts")
    #user
    body=models.TextField()
    #
    publish=models.DateTimeField(default=timezone.now)
    #
    class Meta:
        ordering=("-publish",)#规定了实例对象的显示顺序 即按照publish的字段进行显示

    def __str__(self):
        return self.title
      #+END_SRC
   3. [ ] 注册
      #+BEGIN_SRC
admin.site.register(article,BlogArticleAdmin)
      #+END_SRC
3. [ ] 写入
4. [ ] 测试

**** USEFULL 参考class Article(BaseModel): 进行修改
CLOSED: [2020-10-24 六 15:34]
:LOGBOOK:
- State "USEFULL"    from "TODO"       [2020-10-24 六 15:34] \\
  直接在blog  按照他的规则添加 之后 修改成功了  接下来按照自己的思路进行修改
:END:
#+BEGIN_SRC python
./blog/admin.py:from .models import Article, Category, Tag, Links, SideBar, BlogSettings
./blog/admin.py:class ArticleListFilter(admin.SimpleListFilter):
./blog/admin.py:        authors = list(set(map(lambda x: x.author, Article.objects.all())))
./blog/admin.py:class ArticleForm(forms.ModelForm):
./blog/admin.py:        model = Article
./blog/admin.py:class ArticlelAdmin(admin.ModelAdmin):
./blog/admin.py:    form = ArticleForm
./blog/admin.py:    list_filter = (ArticleListFilter, 'status', 'type', 'category', 'tags')
./blog/admin.py:        form = super(ArticlelAdmin, self).get_form(request, obj, **kwargs)
./blog/admin.py:        super(ArticlelAdmin, self).save_model(request, obj, form, change)
./blog/templatetags/blog_tags.py:from blog.models import Article, Category, Tag, Links, SideBar, LinkShowType
./blog/templatetags/blog_tags.py:    recent_articles = Article.objects.filter(
./blog/templatetags/blog_tags.py:    most_read_articles = Article.objects.filter(status='p').order_by(
./blog/templatetags/blog_tags.py:    dates = Article.objects.datetimes('created_time', 'month', order='DESC')
匹配到二进制文件 ./blog/templatetags/__pycache__/blog_tags.cpython-39.pyc
./blog/urls.py:        views.ArticleDetailView.as_view(),
./blog/views.py:from blog.models import Article, Category, Tag, Links, LinkShowType
./blog/views.py:class ArticleListView(ListView):
./blog/views.py:        return super(ArticleListView, self).get_context_data(**kwargs)
./blog/views.py:class IndexView(ArticleListView):
./blog/views.py:        article_list = Article.objects.filter(type='a', status='p')
./blog/views.py:class ArticleDetailView(DetailView):
./blog/views.py:    model = Article
./blog/views.py:        obj = super(ArticleDetailView, self).get_object()
./blog/views.py:        return super(ArticleDetailView, self).get_context_data(**kwargs)
./blog/views.py:class CategoryDetailView(ArticleListView):
./blog/views.py:        article_list = Article.objects.filter(
./blog/views.py:class AuthorDetailView(ArticleListView):
./blog/views.py:        article_list = Article.objects.filter(
./blog/views.py:class TagDetailView(ArticleListView):
./blog/views.py:        article_list = Article.objects.filter(
./blog/views.py:class ArchivesView(ArticleListView):
./blog/views.py:        return Article.objects.filter(status='p').all()
./blog/models.py:            Article) and 'update_fields' in kwargs and kwargs['update_fields'] == ['views']
./blog/models.py:            Article.objects.filter(pk=self.pk).update(views=self.views)
./blog/models.py:class Article(BaseModel):
./blog/models.py:        return Article.objects.filter(
./blog/models.py:        return Article.objects.filter(id__lt=self.id, status='p').first()
./blog/models.py:        return Article.objects.filter(tags__name=self.name).distinct().count()
./blog/documents.py:from blog.models import Article, Category, Tag
./blog/documents.py:class ArticleDocument(Document):
./blog/documents.py:        doc_type = 'Article'
./blog/documents.py:class ArticleDocumentManager():
./blog/documents.py:        ArticleDocument.init()
./blog/documents.py:            ArticleDocument(
./blog/documents.py:        ArticleDocument.init()
./blog/documents.py:        articles = articles if articles else Article.objects.all()
./blog/migrations/0001_initial.py:            name='Article',
匹配到二进制文件 ./blog/migrations/__pycache__/0001_initial.cpython-39.pyc
./blog/tests.py:from blog.models import Article, Category, Tag, SideBar, Links
./blog/tests.py:class ArticleTest(TestCase):
./blog/tests.py:        article = Article()
./blog/tests.py:            article = Article()
./blog/tests.py:        p = Paginator(Article.objects.all(), 2)
./blog/tests.py:        p = Paginator(Article.objects.filter(tags=tag), 2)
./blog/tests.py:            Article.objects.filter(
./blog/tests.py:        p = Paginator(Article.objects.filter(category=category), 2)
匹配到二进制文件 ./blog/__pycache__/urls.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/search_indexes.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/documents.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/models.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/context_processors.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/views.cpython-39.pyc
匹配到二进制文件 ./blog/__pycache__/admin.cpython-39.pyc
./blog/search_indexes.py:from blog.models import Article, Category, Tag
./blog/search_indexes.py:class ArticleIndex(indexes.SearchIndex, indexes.Indexable):
./blog/search_indexes.py:        return Article
./blog/management/commands/create_testdata.py:from blog.models import Article, Tag, Category
./blog/management/commands/create_testdata.py:            article = Article.objects.get_or_create(
./blog/management/commands/ping_baidu.py:from blog.models import Article, Tag, Category
./blog/management/commands/ping_baidu.py:            for article in Article.objects.filter(status='p'):
./blog/management/commands/build_index.py:from blog.documents import ElapsedTimeDocument, ArticleDocumentManager
./blog/management/commands/build_index.py:from blog.models import Article
./blog/management/commands/build_index.py:        manager = ArticleDocumentManager()
./blog/management/commands/build_search_words.py:from blog.models import Article, Tag, Category
./blog/context_processors.py:from .models import Category, Article, Tag, BlogSettings
./blog/context_processors.py:            'nav_pages': Article.objects.filter(
./mytest/admin.py:from .models import BlogArticles
./mytest/admin.py:admin.site.register(BlogArticles)
./mytest/models.py:class BlogArticles(models.Model):
./mytest/migrations/0001_initial.py:            name='BlogArticles',
匹配到二进制文件 ./mytest/migrations/__pycache__/0001_initial.cpython-39.pyc
匹配到二进制文件 ./mytest/__pycache__/models.cpython-39.pyc
./accounts/tests.py:from blog.models import Article, Category, Tag
./accounts/tests.py:        article = Article()
./accounts/tests.py:        article = Article()
./DjangoBlog/utils.py:    from blog.models import Article
./DjangoBlog/utils.py:    return (Article.objects.latest().pk, Comment.objects.latest().pk)
./DjangoBlog/urls.py:from DjangoBlog.sitemap import StaticViewSitemap, ArticleSiteMap, CategorySiteMap, TagSiteMap, UserSiteMap
./DjangoBlog/urls.py:    'blog': ArticleSiteMap,
./DjangoBlog/elasticsearch_backend.py:from blog.models import Article
./DjangoBlog/elasticsearch_backend.py:from blog.documents import ArticleDocument, ArticleDocumentManager
./DjangoBlog/elasticsearch_backend.py:        self.manager = ArticleDocumentManager()
./DjangoBlog/elasticsearch_backend.py:        models = iterable if iterable else Article.objects.all()
./DjangoBlog/elasticsearch_backend.py:        models = models if models else Article.objects.all()
./DjangoBlog/elasticsearch_backend.py:        search = ArticleDocument.search() \
./DjangoBlog/elasticsearch_backend.py:            model_name = 'Article'
./DjangoBlog/admin_site.py:from mytest.models import BlogArticles,Test
./DjangoBlog/admin_site.py:admin_site.register(Article, ArticlelAdmin)
./DjangoBlog/tests.py:from blog.models import Article, Category, Tag
匹配到二进制文件 ./DjangoBlog/__pycache__/urls.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/feeds.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/sitemap.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/utils.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/admin_site.cpython-39.pyc
匹配到二进制文件 ./DjangoBlog/__pycache__/blog_signals.cpython-39.pyc
./DjangoBlog/feeds.py:from blog.models import Article
./DjangoBlog/feeds.py:        return Article.objects.filter(type='a', status='p').order_by('-pub_time')[:5]
./DjangoBlog/blog_signals.py:from blog.models import Article, Category, Tag, Links, SideBar, BlogSettings
./DjangoBlog/sitemap.py:from blog.models import Article, Category, Tag
./DjangoBlog/sitemap.py:class ArticleSiteMap(Sitemap):
./DjangoBlog/sitemap.py:        return Article.objects.filter(status='p')
./DjangoBlog/sitemap.py:        return list(set(map(lambda x: x.author, Article.objects.all())))
./docs/README-en.md:- Articles, Pages, Categories, Tags(Add, Delete, Edit), edc. Articles and pages support `Markdown` and highlighting.
./docs/README-en.md:- Articles support full-text search.
./.git/COMMIT_EDITMSG:参考class Article(BaseModel): 进行修改
./.git/logs/HEAD:7c31178de6f55f86338da3587905c03b7e4864ea 900653ce1fcc801d06e56dfa4134e70ef479120a zhang1998 <2764207312@qq.com> 1603523977 +0800	commit: 参考class Article(BaseModel): 进行修改
./.git/logs/refs/heads/master:7c31178de6f55f86338da3587905c03b7e4864ea 900653ce1fcc801d06e56dfa4134e70ef479120a zhang1998 <2764207312@qq.com> 1603523977 +0800	commit: 参考class Article(BaseModel): 进行修改


#+END_SRC

**** TODO 直接修改
**** TODO 百度 修改 设定文件的方法
**** TODO 学一学基本的知识然后进行修改
**** TODO 将其修改为原本的版本
**** TODO 从站点管理 反面追踪
** TODO 图片和文字的复杂结合
*** TODO 添加文字的部分
**** DONE 先看懂部分代码
CLOSED: [2020-10-23 五 16:08]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-23 五 16:08]
:END:
主要是找到 他的内容才能进行自己的修改

./blog/models.py:        '文章状态',
./blog/migrations/0001_initial.py:                ('status', models.CharField(choices=[('d', '草稿')

这货  就是直接写的model  然后调用的  我感觉
***** TODO 主要是
**** TODO 直接使用admin添加内容
1. [X] 定义model
2. [X] 进行注册
3. [X] 测试 失败 不知道为啥
***** TODO 先按照老齐的那个方案注册一下
**** TODO 如何将每个 clo 和其他的分开 将每个组分开
**** TODO 简单的准备内容
1. [ ] 添加app部分
2. [ ] 复制老齐的app部分
**** TODO 进行修改的测试
**** TODO 设计页面进行添加内容
*** TODO 展示内容的部分
